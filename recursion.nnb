{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "{\n    \"cells\": [\n        {\n            \"language\": \"markdown\",\n            \"source\": [\n                \"## Recursion Task\"\n            ],\n            \"outputs\": []\n        },\n        {\n            \"language\": \"typescript\",\n            \"source\": [\n                \"function division(number, dividedBy) {\\n    // Write you logic here.\\n    if (dividedBy === 0) {\\n        // throw new Error('division by zero is not allowed');\\n      return \\\"division by zero is not allowed\\\"\\n    }\\n    \\n    if (number < dividedBy) {\\n      return 0;\\n    }\\n    \\n    return 1 + division(number - dividedBy, dividedBy);\\n}\\nconsole.log(division(9,3))\\nconsole.log(division(10,2))\\nconsole.log(division(5,0)) \"\n            ],\n            \"outputs\": [\n                {\n                    \"items\": [\n                        {\n                            \"mime\": \"application/vnd.code.notebook.stdout\",\n                            \"value\": [\n                                \"3\",\n                                \"5\",\n                                \"division by zero is not allowed\",\n                                \"\"\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"language\": \"typescript\",\n            \"source\": [\n                \"\\nfunction pow(x, n) {\\n    // Write you logic here.\\n    if (n === 0) {\\n        return 1;\\n    }\\n    \\n    if (n < 0) {\\n        return 1 / pow(x, -n);\\n    }\\n    \\n    return x * pow(x, n - 1);\\n    // return;\\n}\\n\\nconsole.log(pow(2, 4));//16\\nconsole.log(pow(9,0))//1\\n\"\n            ],\n            \"outputs\": [\n                {\n                    \"items\": [\n                        {\n                            \"mime\": \"application/vnd.code.notebook.stdout\",\n                            \"value\": [\n                                \"16\",\n                                \"1\",\n                                \"\"\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"language\": \"typescript\",\n            \"source\": [\n                \"function fibonacci(n) {\\n  if (n === 0) {\\n    return 0;\\n  }\\n  \\n  if (n === 1 || n === 2) {\\n  return 1;\\n  }\\n  \\n  return fibonacci(n - 1) + fibonacci(n - 2);\\n}\\n\\nconsole.log(fibonacci(6))\\nconsole.log(fibonacci(12))\"\n            ],\n            \"outputs\": [\n                {\n                    \"items\": [\n                        {\n                            \"mime\": \"application/vnd.code.notebook.stdout\",\n                            \"value\": [\n                                \"8\",\n                                \"144\",\n                                \"\"\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"language\": \"typescript\",\n            \"source\": [\n                \"// function permutations(n, k) {\\n//     let result;\\n  \\n//     const nums = Array.from({ length: n }, (_, index) => index + 1);\\n//     const used = Array(n).fill(false);\\n//     const path = [];\\n  \\n//     backtrack(nums, used, path, result);\\n  \\n//     return result[k - 1];\\n//   }\\n  \\n//   function backtrack(nums, used, path, result) {\\n//     if (path.length === nums.length) {\\n//       result.push(path.join(''));\\n//       return;\\n//     }\\n  \\n//     for (let i = 0; i < nums.length; i++) {\\n//       if (!used[i]) {\\n//         used[i] = true;\\n//         path.push(nums[i]);\\n  \\n//         backtrack(nums, used, path, result);\\n  \\n//         path.pop();\\n//         used[i] = false;\\n//       }\\n//     }\\n//   }\\n  \\n//   console.log(permutations(3, 3)); // Output: \\\"213\\\"\\n  \"\n            ],\n            \"outputs\": []\n        }\n    ]\n}"
            ],
            "outputs": []
        }
    ]
}